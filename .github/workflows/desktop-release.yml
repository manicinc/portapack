name: Release Desktop GUI

on:
  push:
    branches:
      - master

jobs:
  release:
    if: startsWith(github.event.head_commit.message, 'desktop:')
    name: Build and Release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
          - goos: windows
            goarch: amd64
            runner: windows-latest
          - goos: darwin
            goarch: amd64
            runner: macos-latest

    runs-on: ${{ matrix.runner }}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Add Go bin to PATH (Unix)
        if: matrix.goos != 'windows'
        shell: bash
        run: echo "${HOME}/go/bin" >> $GITHUB_PATH

      - name: Add Go bin to PATH (Windows)
        if: matrix.goos == 'windows'
        shell: bash
        run: echo "${USERPROFILE}/go/bin" >> $GITHUB_PATH

      # Install Linux dependencies for Wails
      - name: Install Linux Dependencies
        if: matrix.goos == 'linux'
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.1-dev libglib2.0-dev libappindicator3-dev libnotify-dev

      - name: Extract Version Tag
        id: get_version
        shell: bash
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "üîç Full commit message: '$COMMIT_MSG'"
          
          # More robust version extraction with debugging
          VERSION=$(echo "$COMMIT_MSG" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          
          echo "üîç Extracted version: '$VERSION'"
          
          if [ -z "$VERSION" ]; then
            echo "‚ùå No version tag (e.g. v1.2.3) found in commit message."
            echo "üìù Commit message was: $COMMIT_MSG"
            echo "üìã Expected format: 'desktop: v1.2.3 - description'"
            exit 1
          fi

          # Use desktop-specific tag to avoid conflicts with CLI releases
          DESKTOP_TAG="desktop-$VERSION"
          
          echo "‚úÖ Version found: $VERSION"
          echo "‚úÖ Desktop tag: $DESKTOP_TAG"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "desktop_tag=$DESKTOP_TAG" >> "$GITHUB_OUTPUT"

      - name: Build Wails app for ${{ matrix.goos }}-${{ matrix.goarch }}
        shell: bash
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          cd desktop
          if [ "${{ matrix.goos }}" = "linux" ]; then
            wails build -platform ${{ matrix.goos }}/${{ matrix.goarch }} -tags webkit2_41
          else
            wails build -platform ${{ matrix.goos }}/${{ matrix.goarch }}
          fi

          APP_NAME="portapack"
          mkdir -p ../build/${{ matrix.goos }}_${{ matrix.goarch }}

          if [ "${{ matrix.goos }}" = "darwin" ]; then
            # macOS builds create .app bundles
            cp -r "build/bin/$APP_NAME.app" "../build/${{ matrix.goos }}_${{ matrix.goarch }}/"
          elif [ "${{ matrix.goos }}" = "windows" ]; then
            # Windows builds create .exe files
            cp "build/bin/$APP_NAME.exe" "../build/${{ matrix.goos }}_${{ matrix.goarch }}/"
          else
            # Linux builds create regular executables
            cp "build/bin/$APP_NAME" "../build/${{ matrix.goos }}_${{ matrix.goarch }}/"
          fi

      - name: Archive Build
        shell: bash
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            powershell -Command "Compress-Archive -Path 'build/${{ matrix.goos }}_${{ matrix.goarch }}/*' -DestinationPath 'portapack-desktop-${{ steps.get_version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip'"
          else
            cd build/${{ matrix.goos }}_${{ matrix.goarch }}
            zip -r ../../portapack-desktop-${{ steps.get_version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip .
            cd ../..
          fi

      - name: Create GitHub Release (only once)
        if: matrix.goos == 'linux'
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Desktop GUI Release ${{ steps.get_version.outputs.version }}
          tag_name: ${{ steps.get_version.outputs.desktop_tag }}
          body: |
            üñ•Ô∏è **Desktop GUI Release ${{ steps.get_version.outputs.version }}**
            
            This release contains the desktop GUI application for PortaPack.
            
            ## Downloads
            - **Windows**: `portapack-desktop-${{ steps.get_version.outputs.version }}-windows-amd64.zip`
            - **macOS**: `portapack-desktop-${{ steps.get_version.outputs.version }}-darwin-amd64.zip`  
            - **Linux**: `portapack-desktop-${{ steps.get_version.outputs.version }}-linux-amd64.zip`
            
            ## Installation
            1. Download the appropriate file for your operating system
            2. Extract the archive
            3. Run the executable
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.desktop_tag }}
          files: portapack-desktop-${{ steps.get_version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip