name: Release Desktop GUI

on:
  push:
    branches:
      - master

jobs:
  release:
    if: startsWith(github.event.head_commit.message, 'desktop:')
    name: Build and Release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
          - goos: windows
            goarch: amd64
            runner: ubuntu-latest
          - goos: darwin
            goarch: amd64
            runner: macos-latest

    runs-on: ${{ matrix.runner }}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Add Go bin to PATH
        run: echo "${HOME}/go/bin" >> $GITHUB_PATH

      - name: Extract Version Tag
        id: get_version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          VERSION=$(echo "$COMMIT_MSG" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' || true)

          if [ -z "$VERSION" ]; then
            echo "❌ No version tag (e.g. v1.2.3) found in commit message."
            exit 1
          fi

          echo "✅ Version found: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Build Wails app for ${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          cd desktop
          wails build -platform ${{ matrix.goos }}/${{ matrix.goarch }}

          APP_NAME=$(basename "$(pwd)")
          OUTPUT_PATH="build/bin/${{ matrix.goos }}/${{ matrix.goarch }}/$APP_NAME"

          mkdir -p ../build/${{ matrix.goos }}_${{ matrix.goarch }}
          cp "$OUTPUT_PATH" ../build/${{ matrix.goos }}_${{ matrix.goarch }}/

      - name: Archive Build
        run: |
          cd build/${{ matrix.goos }}_${{ matrix.goarch }}
          zip -r ../../app-${{ matrix.goos }}-${{ matrix.goarch }}.zip .
          cd ../..

      - name: Create GitHub Release (only once)
        if: matrix.goos == 'linux'
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get_version.outputs.version }}
          tag_name: ${{ steps.get_version.outputs.version }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: app-${{ matrix.goos }}-${{ matrix.goarch }}.zip
